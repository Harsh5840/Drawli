name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NODE_ENV: production
  IMAGE_TAG: "v$(date +%Y%m%d)-${GITHUB_SHA::8}"

jobs:
  # ---------- CI Stage ----------
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd packages/db && pnpm prisma generate

      - name: Run tests
        run: |
          cd apps/http-backend && pnpm test
          cd ../../apps/ws-backend && pnpm test
          cd ../../apps/drawli-front && pnpm test

  # ---------- Docker Build & Push ----------
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push HTTP Backend
        uses: docker/build-push-action@v5
        with:
          context: ./apps/http-backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/drawli-http:latest
            ${{ secrets.DOCKER_USERNAME }}/drawli-http:${{ env.IMAGE_TAG }}

      - name: Build & Push WebSocket Backend
        uses: docker/build-push-action@v5
        with:
          context: ./apps/ws-backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/drawli-ws:latest
            ${{ secrets.DOCKER_USERNAME }}/drawli-ws:${{ env.IMAGE_TAG }}

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./apps/drawli-front
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/drawli-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/drawli-frontend:${{ env.IMAGE_TAG }}

  # ---------- Deploy to EC2 ----------
  deploy-to-ec2:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /path/to/your/app
            
            # Pull the latest images
            echo "Pulling latest Docker images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/drawli-http:${{ needs.docker-build-and-push.outputs.image_tag }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/drawli-ws:${{ needs.docker-build-and-push.outputs.image_tag }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/drawli-frontend:${{ needs.docker-build-and-push.outputs.image_tag }}
            
            # Update environment file
            echo "Updating environment variables..."
            cat > .env << 'EOF'
            # Database
            DATABASE_URL=postgresql://user:password@host:5432/dbname
            
            # Authentication
            JWT_SECRET=your_jwt_secret_here
            JWT_EXPIRES_IN=30d
            
            # Application
            NODE_ENV=production
            PORT=4000
            
            # Frontend
            NEXT_PUBLIC_API_URL=https://your-domain.com/api
            NEXT_PUBLIC_WS_URL=wss://your-domain.com/ws
            
            # Rate Limiting
            RATE_LIMIT_WINDOW=15m
            RATE_LIMIT_MAX=100
            
            # Docker Image Tags
            HTTP_IMAGE=${{ secrets.DOCKER_USERNAME }}/drawli-http:${{ needs.docker-build-and-push.outputs.image_tag }}
            WS_IMAGE=${{ secrets.DOCKER_USERNAME }}/drawli-ws:${{ needs.docker-build-and-push.outputs.image_tag }}
            FRONTEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/drawli-frontend:${{ needs.docker-build-and-push.outputs.image_tag }}
            EOF
            
            # Start/Update containers
            echo "Starting services..."
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker image prune -af
            
            echo "Deployment completed successfully!"
